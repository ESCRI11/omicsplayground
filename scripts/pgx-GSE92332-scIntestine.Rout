
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##rm(list=setdiff(ls(),run.param))
> library(knitr)
> library(limma)
> library(edgeR)
> library(RColorBrewer)
> library(gplots)

Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> library(matrixTests)
> library(kableExtra)
> library(knitr)
> 
> source("../R/gx-heatmap.r")
> source("../R/gx-limma.r")
> source("../R/gx-util.r")
> source("../R/ngs-cook.r")
> source("../R/ngs-fit.r")
> source("../R/ngs-functions.R")
> source("../R/gset-fisher.r")
> source("../R/gset-gsea.r")
> source("../R/gset-meta.r")
> source("../R/pgx-graph.R")
Loading required package: BiocParallel
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:limma’:

    plotMA

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:gplots’:

    space

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians


Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following object is masked from ‘package:base’:

    apply


Attaching package: ‘SingleCellExperiment’

The following object is masked from ‘package:edgeR’:

    cpm


Attaching package: ‘igraph’

The following object is masked from ‘package:GenomicRanges’:

    union

The following object is masked from ‘package:IRanges’:

    union

The following object is masked from ‘package:S4Vectors’:

    union

The following objects are masked from ‘package:BiocGenerics’:

    normalize, union

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> source("../R/xcr-graph.r")
> source("../R/pgx-functions.R")
> 
> source("options.R")
> SMALL
[1] 4000
> COMPARE.CLUSTERS=FALSE
> ##COMPARE.CLUSTERS=TRUE
> DOWNSAMPLE=50
> FILTER.GENES=TRUE
> 
> rda.file="../pgx/GSE92332-scIntestine.pgx"
> ##if(COMPARE.CLUSTERS) rda.file <- sub(".pgx$",paste0("-vsCLUST.pgx"),rda.file)
> ##if(DOWNSAMPLE>0) rda.file <- sub(".pgx$",paste0("-s",DOWNSAMPLE,".pgx"),rda.file)
> rda.file
[1] "../pgx/GSE92332-scIntestine.pgx"
> 
> ##load(file=rda.file, verbose=1)
> ngs <- list()  ## empty object
> ngs$name = gsub("^.*pgx/|[.]pgx$","",rda.file)
> ngs$date = date()
> ngs$datatype = "scRNA-seq"
> ngs$description = "GSE92332 data set. A single-cell survey of the small intestinal epithelium (Haber et al., Cell 2017)."
> 
> ## READ/PARSE DATA
> if(PROCESS.DATA) {
+ 
+     ## ##############################################################
+     ##   Differential expression analysis with limma
+     ##BiocManager::install("GEOquery", version = "3.8")
+     library(Biobase)
+     library(GEOquery)
+     library(data.table)
+ 
+     ##--------------------------------------------------------------
+     ## Read SC counts
+     ##--------------------------------------------------------------
+     ## load series and platform data from GEO
+     datafile = "/tmp/GSE92332_atlas_UMIcounts.txt.gz"
+     if(!file.exists(datafile)) {
+         system("wget ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE92nnn/GSE92332/suppl/GSE92332_atlas_UMIcounts.txt.gz -P /tmp")
+     }
+     suppressWarnings( gse <- fread( datafile,nrow=-1000) )
+     dim(gse)
+     head(gse)[,1:10]
+     head(colnames(gse),10)
+     counts = as.matrix(gse[,2:ncol(gse)])
+     head(counts)[,1:10]
+     summary(colSums(counts))
+     dim(counts)
+     
+     ##-------------------------------------------------------------------
+     ## Dowsample samples
+     ##-------------------------------------------------------------------
+     DOWNSAMPLE
+     if(DOWNSAMPLE>0) {
+         ## sample each category
+         tissue <- sub(".*_","",colnames(counts))
+         table(tissue)
+         jj <- order(-colSums(counts))
+         jj <- tapply(jj, tissue[jj], function(x) head(x,DOWNSAMPLE))
+         ##jj <- tapply(jj, tissue[jj], function(x) head(x,20))
+         jj <- unlist(jj)
+         table(tissue[jj])
+         counts <- counts[,jj]
+         dim(counts)
+         summary(colSums(counts))
+     }
+     dim(counts)
+     
+     ##--------------------------------------------------------------
+     ## gene annotation
+     ##--------------------------------------------------------------
+     require(org.Mm.eg.db)
+     gene <- as.character(gse[[1]])
+     genes <- select(org.Mm.eg.db, gene, c("ENTREZID","GENENAME","CHR"), "SYMBOL")
+     colnames(genes) <- c("gene_name","entrez_id","gene_title","chr")
+     head(genes)
+     dim(genes)
+     sum(duplicated(genes$gene_name))
+     head(genes)
+     genes <- genes[match(gene,genes$gene_name),]
+     dim(genes)
+     head(genes)
+ 
+     ## add gene type information
+     ##require("EnsDb.Hsapiens.v86")
+     if(!require("EnsDb.Mmusculus.v79")) {
+         BiocManager::install("EnsDb.Mmusculus.v79")
+     }
+     require("EnsDb.Mmusculus.v79")
+     daf <- transcripts(EnsDb.Mmusculus.v79,
+                        columns = c("gene_name", "gene_biotype"),
+                        return.type="DataFrame")
+     head(daf)
+     genes$gene_biotype <- daf$gene_biotype[match(genes$gene_name,daf$gene_name)]
+     table(genes$gene_biotype)
+     head(genes)
+ 
+     ##--------------------------------------------------------------
+     ## Prepare sample table
+     ##--------------------------------------------------------------
+ 
+     ## geo <- getGEO("GSE92332", GSEMatrix =TRUE, AnnotGPL=TRUE)
+     ## str(geo[[1]])
+     ## pdata = pData(geo[[1]])
+     ## head(pdata)
+     ## table(pdata$source_name_ch1)
+     ## table(pdata$"tissue:ch1")
+     ## table(pdata$"treatment:ch1")
+ 
+     tissue <- sub(".*_","",colnames(counts))
+     batch  <- sub("_.*","",colnames(counts))
+     sampleTable <- data.frame(batch=batch, tissue=tissue)
+     rownames(sampleTable) <- colnames(counts)
+     head(sampleTable)
+ 
+     ##-------------------------------------------------------------------
+     ## Now create an PGX object
+     ##-------------------------------------------------------------------
+     ngs$counts <- round(counts)
+     ngs$samples <- sampleTable
+     ngs$genes = genes
+     ##lib.size <- colSums(data$counts / 1e6)  ## get original summed intensity as lib.size
+     ##ngs$samples$batch <- NULL
+     ##ngs$samples$batch <- as.integer(lib.size2)
+ 
+     ## tagged rownames???
+     row.id = paste0("tag",1:nrow(ngs$genes),":",ngs$genes[,"gene_name"])
+     rownames(ngs$genes) = rownames(ngs$counts) = row.id
+     names(ngs)
+ 
+     ##-------------------------------------------------------------------
+     ## collapse multiple row for genes by summing up counts
+     ##-------------------------------------------------------------------
+     sum(duplicated(ngs$genes$gene_name))
+     ngs <- ngs.collapseByGene(ngs)
+     dim(ngs$counts)
+     dim(ngs$genes)
+ 
+     ##-------------------------------------------------------------------
+     ## gene filtering
+     ##-------------------------------------------------------------------
+     sort(table(ngs$genes$gene_biotype))
+ 
+     FILTER.GENES
+     if(FILTER.GENES) {
+         is.sex <- (ngs$genes$chr %in% c("chrX","chrY","X","Y",23,24))
+         prot.coding <- (ngs$genes$gene_biotype == "protein_coding" &
+                         !is.na(ngs$genes$gene_biotype) )
+         imm.gene <- grepl("^TR_|^IG_",ngs$genes$gene_biotype)
+         keep <- (prot.coding | imm.gene)
+         table(ngs$genes$chr[which(keep)])
+         sort(table(ngs$genes$gene_biotype[which(keep)]))
+         ##keep <- ( keep & !is.sex & prot.coding)
+         ##keep <- (keep & !is.sex & (prot.coding | imm.gene))
+         cpm <- edgeR::cpm(ngs$counts)
+         keep <- (keep & rowMeans(cpm >= 3) >= 0.01)
+         table(keep)
+         ngs$counts <- ngs$counts[keep,]
+         ngs$genes  <- ngs$genes[keep,]
+     }
+     dim(ngs$counts)
+     
+     ##-------------------------------------------------------------------
+     ## Pre-calculate t-SNE for and get clusters early so we can use it
+     ## for doing differential analysis.
+     ##-------------------------------------------------------------------
+     ngs <- pgx.clusterSamples(ngs, skipifexists=FALSE,
+                               perplexity=30, kclust=1)
+     head(ngs$samples)
+ 
+     ##-------------------------------------------------------------------
+     ## take top varying
+     ##-------------------------------------------------------------------
+     if(0 && SMALL>0) {
+         cat("shrinking data matrices: n=",SMALL,"\n")
+         logcpm = edgeR::cpm(ngs$counts, log=TRUE)
+         jj <- head( order(-apply(logcpm,1,sd)), SMALL )  ## how many genes?
+         head(jj)
+         ##bX <- bX[jj,]
+         ngs$counts <- ngs$counts[jj,]
+         ngs$genes  <- ngs$genes[jj,]
+     }
+     dim(ngs$counts)
+     ngs$timings <- c()
+ 
+     rda.file
+     save(ngs, file=rda.file)
+ }
Setting options('download.file.method.GEOquery'='auto')
Setting options('GEOquery.inmemory.gpl'=FALSE)

Attaching package: ‘data.table’

The following object is masked from ‘package:SummarizedExperiment’:

    shift

The following object is masked from ‘package:GenomicRanges’:

    shift

The following object is masked from ‘package:IRanges’:

    shift

The following objects are masked from ‘package:S4Vectors’:

    first, second

Loading required package: org.Mm.eg.db
Loading required package: AnnotationDbi

'select()' returned 1:many mapping between keys and columns
Loading required package: EnsDb.Mmusculus.v79
Loading required package: ensembldb
Loading required package: GenomicFeatures
Loading required package: AnnotationFilter

Attaching package: 'ensembldb'

The following object is masked from 'package:stats':

    filter

>>> Computing t-SNE on samples...
Loading required package: Rtsne
Loading required package: irlba
Loading required package: Matrix

Attaching package: 'Matrix'

The following object is masked from 'package:S4Vectors':

    expand

performing tSNE on full matrix...
determining clusters...
Found 7 clusters...
Warning message:
In .deprecatedColsMessage() :
  Accessing gene location information via 'CHR','CHRLOC','CHRLOCEND' is
  deprecated. Please use a range based accessor like genes(), or select()
  with columns values like TXCHROM and TXSTART on a TxDb or OrganismDb
  object instead.
> 
> 
> if(DIFF.EXPRESSION) {
+     load(file=rda.file, verbose=1)
+ 
+     ## use TISSUE as groups
+     ngs$samples$group <- as.character(ngs$samples$tissue)
+     table(ngs$samples$cluster, ngs$samples$group)
+ 
+     ## ----------------- test genes ------------------------------------------
+     ## COMPARE.CLUSTERS
+     ## clusters <- ngs$samples$tissue
+     ## if(COMPARE.CLUSTERS) {
+     ##     clusters <- ngs$samples$cluster
+     ## }
+     ## ## make model matrix for group vs. rest
+     ## table(clusters)
+     ## contr.matrix <- makeClusterContrasts(clusters, full=FALSE)
+     ## contr.matrix
+     ## ##contr.matrix = contr.matrix[,1:3]
+ 
+     tissue.contr <- makeClusterContrasts(ngs$samples$tissue, full=FALSE, by.sample=TRUE)
+     cluster.contr <- makeClusterContrasts(ngs$samples$cluster, full=FALSE, by.sample=TRUE)
+     contr.matrix <- cbind(tissue.contr, cluster.contr)
+     rownames(contr.matrix) <- rownames(ngs$samples)
+     contr.matrix <- normalizeContrasts(contr.matrix)
+     
+     ## USER.GENETEST.METHODS=c("trend.limma","deseq2.wald","edger.qlf")
+     USER.GENETEST.METHODS=c("trend.limma","edger.qlf","edger.lrt")
+     USER.GENESETTEST.METHODS=c("fisher","gsva","camera","fgsea")
+     source("../R/compute-genes.R")
+     source("../R/compute-genesets.R")
+     source("../R/compute-extra.R")
+ 
+ }
Loading objects:
  ngs
testing on samples...
filtering for low-expressed genes: > 1 CPM in >= 8 samples
filtering out 0 low-expressed genes
keeping 10719 expressed genes
shrinking data matrices: n= 4000 
>>> Testing differential expressed genes (DEG) with methods: trend.limma edger.qlf edger.lrt 
calculating methods: trend.limma edger.qlf edger.lrt 
prior CPM counts = 1 
CPM scale = 1e+06 
quantile normalizing logCPM values
fitting using LIMMA trend (5.066s)
fitting edgeR using QL F-test Design matrix not provided. Switch to the classic mode.
 (75.561s)
fitting edgeR using LRTDesign matrix not provided. Switch to the classic mode.
 (71.488s)
Loading required package: metap
            user.self sys.self elapsed user.child sys.child
trend.limma     5.066    0.184   5.255          0         0
edger.qlf      75.561    0.328  75.918          0         0
edger.lrt      71.488    0.176  71.688          0         0
Loading mouse gene sets...
Error in readChar(con, 5L, useBytes = TRUE) : cannot open the connection
Calls: source -> withVisible -> eval -> eval -> load -> readChar
In addition: Warning message:
In readChar(con, 5L, useBytes = TRUE) :
  cannot open compressed file '../lib//gmt-all-mouse.rda', probable reason 'No such file or directory'
Execution halted
